// This is based on Sweep
// by BARRAGAN <http://barraganstudio.com> 


#include <Servo.h> 

// Create the servo objects
Servo servox;
Servo servoy;

double pos = 0; // Position incrementer
float spd = 0.005; // This value seems to work for reasonable speed.
float facter; // Ratio between servox and servoy periods.
float starter; // Starting position offset between the servos.
int adjx = 90; // Position of servox
int adjy = 90; // Position of servoy
float decay = 60000; // Gives the amount of steps to run on. Higher gives a slower decay.
float scale; // Scaling the image to maximum size. Gets adjusted after first run.
float circle_size;
float circle_speed;
float circle_start;
float min_x;
float min_y;
bool first_loop;
int params_index = 0;

// Known good combos of params: These will generate nice-looking lissajous figures.
// ratio, starter, circle_size, circle_speed, circle_offset, circle_start
const float known_good_params[151][6] PROGMEM = {
{0.9710839, 1.010709, 0.8859153, 1.95079, 0.04688287, 1.579516},
{1.971455, 1.737342, 0.5896676, 1.014613, 0.02773595, 2.887473},
{1.988666, 3.032384, 0.2211091, 2.922023, -0.008656338, 2.099538},
{3.011187, 2.967362, 0.8652937, 0.0001042063, -0.02774683, 0.4718023},
{1.002194, 3.134043, 0.5559592, 1.776895, 0.04292919, 0.772946},
{2.014919, 2.363508, 0.4020648, 0.05102474, -0.02016146, 0.2955257},
{2.998474, 0.7123112, 0.502477, 1.337131, 0.001046354, 0.5677056},
{2.988972, 2.203555, 0.7823237, 2.97177, 0.04173004, 1.819743},
{0.982881, 2.931171, 0.5996601, 2.041579, -0.01705687, 3.116306},
{0.9709445, 1.196181, 0.3260978, 2.95468, -0.03429342, 2.914233},
{2.000201, 2.477498, 0.000719379, 2.906373, -0.02338304, 3.069102},
{0.9722124, 0.04171812, 0.3661137, 2.068714, -0.02499265, 2.106476},
{3.019424, 2.717299, 0.9216239, 0.9811762, 0.03908552, 1.514465},
{2.023598, 0.1079971, 0.699272, 0.04577844, -0.02391653, 1.281794},
{1.023404, 0.5159644, 0.2176952, 1.087524, -0.02514215, 1.500931},
{1.981839, 2.304045, 0.8324856, 1.050404, -0.04623046, 1.809524},
{0.9890923, 0.2841173, 0.001638677, 2.28364, 0.0137606, 0.7782333},
{0.996594, 2.880348, 0.8225777, 0.6499011, 0.02450164, 0.01818385},
{3.00084, 1.934385, 0.8287858, 2.299699, 0.03627188, 3.041984},
{3.002051, 1.765529, 0.2388306, 1.910525, 0.04313798, 1.068653},
{2.979196, 2.566121, 0.2961308, 1.074573, -0.0346242, 2.528603},
{1.018701, 0.2581235, 0.6415216, 2.992521, -0.02204589, 1.988294},
{2.012705, 2.483921, 0.6303088, 0.4391546, 0.04952559, 1.882202},
{1.978667, 2.607066, 0.08916466, 0.4936523, 0.01116926, 2.084733},
{0.9731239, 0.4608327, 0.5546049, 1.934112, 0.01686166, 2.306539},
{0.9971541, 2.398653, 0.9929191, 2.931679, 0.01756963, 2.925548},
{0.9750743, 0.2409169, 0.7188367, 1.021417, -0.0432593, 0.3909853},
{0.9878101, 0.314947, 0.4029594, 0.8803963, 0.04159934, 1.659465},
{2.016382, 1.35927, 0.3613982, 1.533088, -0.00287014, 0.7682444},
{1.020423, 2.969909, 0.1704657, 2.153329, -0.04520143, 2.925097},
{2.007697, 2.795871, 0.9858687, 1.21329, 0.04822901, 2.513858},
{1.00475, 2.492871, 0.4942704, 2.133692, 0.01147814, 2.422684},
{1.016646, 2.645208, 0.1323461, 1.093115, -0.03432921, 3.028323},
{1.003616, 0.650151, 0.08825499, 0.03671241, -0.006736158, 2.712513},
{2.992612, 2.171183, 0.05405079, 2.920194, 0.01567232, 1.431225},
{2.002091, 0.6784833, 0.7285267, 1.034068, -0.01275525, 0.7288463},
{1.988262, 0.8745689, 0.7553995, 1.350683, -0.02449115, 1.250409},
{2.985161, 0.5584087, 0.9228898, 1.991977, -0.01638775, 1.798804},
{0.9926493, 0.4393758, 0.7039428, 1.783206, 0.0122027, 1.912401},
{2.987536, 1.135934, 0.9006403, 1.523852, -0.02783491, 2.786512},
{0.9875163, 1.961987, 0.9892785, 0.2031216, 0.04413386, 3.113681},
{1.99589, 0.6719226, 0.9323487, 2.548823, -0.02716978, 1.257615},
{1.996256, 1.4885, 0.7526694, 1.38277, -0.04423821, 1.451891},
{3.006728, 2.370129, 0.8550128, 2.645159, 0.01841601, 0.956562},
{2.999384, 2.349963, 0.1922555, 1.00431, 0.01350491, 2.736934},
{2.006454, 1.346678, 0.6045942, 1.0081, 0.002570621, 2.92031},
{1.998961, 2.750861, 0.2102352, 1.651925, 0.008272621, 1.999938},
{2.001969, 0.8077844, 0.6032175, 0.01802856, 0.008196088, 0.6355639},
{1.973883, 0.1318419, 0.008197713, 1.696542, 0.02230222, 1.283794},
{1.990074, 2.393246, 0.3145991, 1.536331, -0.04718148, 0.8374955},
{1.984384, 2.835949, 0.1800141, 0.0480167, -0.00829407, 1.840078},
{1.002245, 2.72166, 0.9431712, 2.506759, 0.02266916, 0.37935},
{3.003687, 0.6851589, 0.01290514, 2.914222, 0.04334325, 1.821722},
{1.008879, 2.416265, 0.7491528, 1.64379, 0.01384353, 1.507586},
{0.9825854, 1.001159, 0.8243661, 2.035376, -0.007016947, 1.619508},
{2.98897, 2.398583, 0.5113526, 0.4686278, 0.04154595, 2.921255},
{2.990963, 1.349355, 0.2303544, 1.054087, -0.01264591, 1.05997},
{1.97303, 1.03406, 0.2294594, 1.042007, -0.01719661, 1.597391},
{1.029065, 0.8757452, 0.7092214, 1.997149, 0.03024703, 2.154862},
{2.974814, 0.4558332, 0.5131683, 0.9851551, -0.02277974, 2.018623},
{1.011798, 1.440444, 0.7719275, 2.498151, -0.04863958, 1.390157},
{3.020864, 0.8016928, 0.876389, 1.623659, 0.04502407, 2.199157},
{1.972183, 2.082206, 0.9109315, 2.473355, -0.009310504, 3.023911},
{2.010502, 0.6199657, 0.7470513, 2.724276, -0.03797576, 1.222264},
{0.9853881, 0.3292233, 0.6218129, 2.28304, 0.02843469, 2.587279},
{1.995676, 2.775625, 0.9077445, 0.7549268, -0.009083509, 0.02255843},
{2.001169, 2.121372, 0.6987544, 0.7095936, -0.0458195, 3.072218},
{2.002211, 2.450289, 0.333815, 1.05647, -0.02519226, 0.1505485},
{0.9887538, 0.004861793, 0.5341843, 1.88547, 0.03669937, 3.02406},
{2.029145, 1.911005, 0.7615895, 1.969749, 0.03095692, 2.222362},
{3.013543, 0.7611248, 0.7953183, 1.995211, 0.01702575, 0.1642176},
{1.980282, 2.553975, 0.7737638, 0.9935879, -0.004379347, 0.7597792},
{1.025502, 1.885305, 0.7758039, 2.542954, 0.0004745546, 3.061877},
{2.989243, 0.6660711, 0.4950376, 2.97005, 0.004821012, 0.3812304},
{1.012651, 2.35256, 0.669484, 2.796368, -0.006414274, 0.6166008},
{3.023893, 1.223989, 0.7609809, 1.539425, -0.04175108, 1.164024},
{0.995579, 2.688575, 0.8647045, 2.065039, -0.03742877, 2.495919},
{2.020029, 1.844819, 0.4270523, 1.024275, -0.04734474, 1.000063},
{1.970764, 2.039474, 0.1094172, 0.9153249, 0.04131478, 2.652436},
{2.027368, 2.374356, 0.2685568, 2.003226, -0.03402426, 3.030822},
{1.974874, 1.23529, 0.4008561, 0.06488197, -0.03391428, 2.406718},
{0.9859241, 0.5353365, 0.485204, 1.083798, -0.04076083, 2.600623},
{2.987906, 1.876022, 0.4743207, 1.974774, 0.03192592, 3.09758},
{1.981447, 0.4668472, 0.3616891, 1.981305, 0.005719166, 0.4439501},
{2.971835, 0.436446, 0.3312625, 0.9633406, 0.0407174, 0.2596281},
{0.9871171, 0.9914639, 0.4557996, 2.484544, -0.002740439, 3.062646},
{0.9794278, 1.092595, 0.5960744, 2.920047, -0.03056686, 1.072346},
{0.9936014, 0.1109832, 0.5195734, 1.523097, -0.0480967, 1.798677},
{0.9991064, 3.072051, 0.4285155, 2.775554, -0.02190591, 1.68643},
{0.9792821, 2.607395, 0.3707598, 1.000714, -0.0158112, 2.265463},
{2.017763, 1.639766, 0.1653529, 1.035448, 0.0007986053, 2.327078},
{1.014673, 2.76344, 0.08148169, 1.038724, 0.01900892, 0.8573382},
{2.998724, 1.810298, 0.3339824, 0.6879276, -0.012369, 0.4399764},
{1.009097, 1.857109, 0.8803204, 2.977838, 0.0357804, 1.213187},
{3.010079, 2.762273, 0.9844219, 0.4615906, 0.03642642, 0.224234},
{2.023027, 1.14362, 0.3252712, 2.567121, -0.03952818, 2.028875},
{2.982436, 1.717283, 0.3538937, 0.9952737, -0.01121573, 0.7805349},
{2.002012, 2.905843, 0.02603929, 1.278836, -0.03349103, 0.3224482},
{2.975838, 2.863944, 0.5636659, 1.030511, -0.02471713, 0.8495279},
{1.017823, 1.883107, 0.7798936, 2.960056, 0.003187504, 2.045697},
{0.9970696, 2.473027, 0.968517, 1.540286, -0.02697713, 2.874137},
{3.009683, 0.2020437, 0.9715209, 0.447821, 0.04931446, 2.543689},
{0.9902267, 0.8918931, 0.9778441, 2.455444, 0.02153811, 0.1227936},
{2.004238, 0.0421781, 0.8436331, 0.07092712, -0.02984409, 1.616805},
{2.009121, 1.717414, 0.03942638, 2.924586, 0.006796803, 1.061527},
{2.02926, 2.22209, 0.4079595, 0.9715124, 0.01157726, 1.942117},
{0.9990924, 0.3208147, 0.6587733, 2.917604, 0.006374887, 1.98892},
{2.980653, 0.8602029, 0.5902201, 1.279773, 0.03807436, 3.079956},
{1.02141, 2.091127, 0.7020846, 0.04946425, -0.04348073, 0.9545862},
{1.025939, 1.233821, 0.5160718, 1.065751, -0.02728554, 1.120937},
{1.004794, 0.3745418, 0.2118716, 1.940481, 0.003077886, 0.2131894},
{3.002905, 2.999735, 0.9053269, 1.6375, 0.02363923, 2.218485},
{2.000502, 3.085716, 0.7421066, 1.680278, -0.0110861, 1.283432},
{2.002483, 0.2234277, 0.003547461, 0.9054191, 0.01244002, 2.599744},
{1.996636, 1.980808, 0.5486096, 1.945583, 0.02452258, 1.302379},
{1.972322, 1.110384, 0.1719705, 0.002639757, 0.03436721, 3.031029},
{3.026307, 2.865412, 0.4696206, 0.5487194, -0.03849452, 0.2988023},
{0.9717342, 0.2356885, 0.6326863, 2.88708, 0.03179655, 1.075458},
{1.009631, 1.907059, 0.9237514, 2.400749, -0.04147412, 0.6744712},
{0.9761203, 2.888881, 0.1608975, 0.9189197, 0.004050636, 3.000903},
{1.997128, 1.865971, 0.9203886, 2.23, 0.01225973, 1.583747},
{3.005462, 0.6033725, 0.0829222, 0.9517086, -0.005403049, 2.215473},
{1.025273, 2.344444, 0.6266064, 1.069887, -0.0356389, 2.699},
{2.00116, 3.102494, 0.395618, 0.6526796, 0.01685498, 1.389853},
{1.01864, 3.002708, 0.3448688, 1.548928, -0.03757175, 2.470849},
{1.994725, 0.4050811, 0.3107912, 2.05083, -0.03337882, 1.486527},
{0.9789583, 1.962289, 0.2851152, 1.970609, 0.03938737, 2.014931},
{2.00665, 1.535387, 0.9368373, 1.96345, 0.01627996, 2.965653},
{1.986425, 2.182849, 0.8980574, 2.886745, 0.02543814, 2.578318},
{3.005789, 2.320162, 0.4521104, 0.9448285, 0.02435237, 0.475409},
{2.984382, 2.46787, 0.7466606, 2.986108, 0.005140269, 0.4987542},
{3.018501, 3.109983, 0.3520896, 0.5044319, -0.01006768, 0.4683399},
{2.01353, 3.067227, 0.1347081, 1.993947, -0.03209747, 2.609011},
{1.01811, 0.2642996, 0.07552801, 2.966176, -0.0465732, 0.8942237},
{1.013814, 0.8329328, 0.771036, 1.473392, 0.04164864, 0.0670963},
{0.9929699, 1.970672, 0.6555332, 2.000075, 0.01925213, 0.4968453},
{1.986382, 1.264548, 0.7538683, 0.9228079, 0.04450042, 0.2397897},
{1.977104, 2.439664, 0.7734388, 1.952409, 0.02551845, 0.390407},
{2.018712, 0.8827558, 0.6937056, 2.987007, 0.01793486, 2.938679},
{1.971575, 1.22936, 0.2187833, 1.940002, 0.02773701, 2.421751},
{3.009971, 1.414916, 0.9123716, 2.957064, 0.03545075, 2.47387},
{0.994777, 0.6271693, 0.09349888, 0.9370258, -0.005732915, 0.6380739},
{3.010531, 2.367716, 0.5996076, 1.954035, 0.02340886, 1.235138},
{0.9935673, 0.2278413, 0.09170162, 2.474749, -0.02816863, 1.615868},
{1.994564, 1.701008, 0.8335502, 2.461292, 0.01151417, 3.034766},
{1.010307, 2.897995, 0.4872113, 2.956541, 0.01788687, 1.3185},
{2.024955, 2.231638, 0.8775636, 0.02504152, -0.02366255, 0.1450268},
{2.024547, 0.3649838, 0.560661, 0.04254838, -0.04967874, 0.04894695},
{0.9948262, 0.504489, 0.9203528, 2.981988, 0.01299977, 2.280154},
{2.014501, 0.8530559, 0.7240277, 2.973177, 0.01427869, 1.225952},
{1.01086, 2.327735, 0.8311846, 2.516305, 0.0001495937, 2.383056}
};

void setup() { 
  servox.attach(6);  // attaches the servo on pin 9 to the servo object
  servoy.attach(7);  // attaches the servo on pin 10 to the servo object
  pinMode(3, INPUT_PULLUP); // Starting button input
//  Serial.begin(9600);
  randomSeed(analogRead(0));
  servox.write(90);
  servoy.write(90);
} 

void loop() { 
  // Wait for a button press.
  while (digitalRead(3) != 0) {
    facter = random(3)/1.0 + 1.0 + random(301)/10000.0;
    starter = random(315)/100.0;
    circle_size = random(20, 100)/100.0;
    circle_speed = random(4)/1.0 - 0.05 + random(101)/1000.0;
    circle_start = random(315)/100.0;
    min_x = 0.0;
    min_y = 0.0;
    scale = 1.5;
    params_index = random(151);
  }
  // We might want to skip this bit to produce fully random ones.
  // ratio, starter, circle_size, circle_speed, circle_offset, circle_start
  facter = pgm_read_float(&(known_good_params[params_index][0]));
  starter = pgm_read_float(&(known_good_params[params_index][1]));
  circle_size = pgm_read_float(&(known_good_params[params_index][2]));
  circle_speed = pgm_read_float(&(known_good_params[params_index][3])) + pgm_read_float(&(known_good_params[params_index][4]));
  circle_start = pgm_read_float(&(known_good_params[params_index][5]));

  servox.write(90);
  servoy.write(90);
  delay(5000);
  // Main loop, to 90% decay in amplitude of the movements.
  decay = 60000.0;

  for(pos = int(decay*0.1); pos < decay; pos += 1)
  {  
    // Adjx just gives me a nice sine wave
    adjx = 90 - (int)min_x + int(35 * scale * (pos/decay * sin(pos * spd) + circle_size * (pos/decay) * sin(circle_start + (pos * spd * circle_speed))));

    // Also a sinewave, with offsets and different period.
    adjy = 90 - (int)min_y + int(35 * scale * (pos/decay * sin(starter + pos * spd * facter) + circle_size * (pos/decay) * cos(circle_start + (pos * spd * circle_speed))));

    servox.write(adjx);
    servoy.write(adjy);

    delay(1); // Just for consistent speed.
  } 
}
